{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-31T14:58:37.680Z",
    "end": "2025-01-31T14:58:39.297Z",
    "duration": 1617,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e5805919-2692-41d0-928a-63c75657af67",
      "title": "",
      "fullFile": "cypress\\tests\\api\\usuarios\\putUsuarios.cy.js",
      "file": "cypress\\tests\\api\\usuarios\\putUsuarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2ca8ec07-fc2d-49ae-b0bd-ff4338251e2f",
          "title": "PUT Usuarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve editar usuario com sucesso",
              "fullTitle": "PUT Usuarios deve editar usuario com sucesso",
              "timedOut": null,
              "duration": 455,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.message).to.contain('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "faad8962-df47-4713-a164-8bef1c1a74ce",
              "parentUUID": "2ca8ec07-fc2d-49ae-b0bd-ff4338251e2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve cadastrar quando o id não existir",
              "fullTitle": "PUT Usuarios deve cadastrar quando o id não existir",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\nconst novoId = _faker.faker.number.int();\ncy.api_putUsuarios(novoId, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body.message).to.contain('Cadastro realizado com sucesso');\n  expect(response.body._id).is.not.null;\n});",
              "err": {},
              "uuid": "7030af0d-1a23-49de-88a9-894af856606a",
              "parentUUID": "2ca8ec07-fc2d-49ae-b0bd-ff4338251e2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "faad8962-df47-4713-a164-8bef1c1a74ce",
            "7030af0d-1a23-49de-88a9-894af856606a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 685,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "79405907-5779-4d75-b088-b6e2e6f6a0d9",
          "title": "Erros",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "não deve editar com email inválido",
              "fullTitle": "Erros não deve editar com email inválido",
              "timedOut": null,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = 'teste@teste';\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\nconst _id = _faker.faker.number.int();\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.have.property('email', 'email deve ser um email válido');\n});",
              "err": {},
              "uuid": "bfb95130-2468-4242-a8e7-1f2d753ad900",
              "parentUUID": "79405907-5779-4d75-b088-b6e2e6f6a0d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "não deve editar com email existente",
              "fullTitle": "Erros não deve editar com email existente",
              "timedOut": null,
              "duration": 436,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let _id;\nconst nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\ncy.api_postUsuarios(nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(201);\n  _id = response.body._id;\n});\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.message).to.contain('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "65ea17f6-c1d8-41f8-902f-21fce852266a",
              "parentUUID": "79405907-5779-4d75-b088-b6e2e6f6a0d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "não deve editar com campos obrigatórios vazios",
              "fullTitle": "Erros não deve editar com campos obrigatórios vazios",
              "timedOut": null,
              "duration": 230,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = '';\nconst email = '';\nconst password = '';\nconst administrador = '';\nconst _id = _faker.faker.number.int();\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.have.all.keys('nome', 'email', 'password', 'administrador');\n  expect(response.body).to.deep.include({\n    nome: 'nome não pode ficar em branco',\n    email: 'email não pode ficar em branco',\n    password: 'password não pode ficar em branco',\n    administrador: \"administrador deve ser 'true' ou 'false'\"\n  });\n});",
              "err": {},
              "uuid": "2e3653ea-04ad-4042-b3f0-e5eedb81d6e5",
              "parentUUID": "79405907-5779-4d75-b088-b6e2e6f6a0d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfb95130-2468-4242-a8e7-1f2d753ad900",
            "65ea17f6-c1d8-41f8-902f-21fce852266a",
            "2e3653ea-04ad-4042-b3f0-e5eedb81d6e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 888,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}