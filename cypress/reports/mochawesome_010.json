{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-29T20:45:49.540Z",
    "end": "2025-01-29T20:45:51.132Z",
    "duration": 1592,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4b1407d1-ccb4-4cce-9941-0cb7d7da92ce",
      "title": "",
      "fullFile": "cypress\\tests\\api\\usuarios\\putUsuarios.cy.js",
      "file": "cypress\\tests\\api\\usuarios\\putUsuarios.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "não deve editar com campos obrigatórios vazios",
          "fullTitle": "não deve editar com campos obrigatórios vazios",
          "timedOut": null,
          "duration": 244,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const nome = '';\nconst email = '';\nconst password = '';\nconst administrador = '';\nconst _id = _faker.faker.number.int();\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.have.all.keys('nome', 'email', 'password', 'administrador');\n  expect(response.body).to.deep.include({\n    nome: 'nome não pode ficar em branco',\n    email: 'email não pode ficar em branco',\n    password: 'password não pode ficar em branco',\n    administrador: \"administrador deve ser 'true' ou 'false'\"\n  });\n});",
          "err": {},
          "uuid": "33903770-ef19-40b0-b8e2-a15c103ebd1a",
          "parentUUID": "4b1407d1-ccb4-4cce-9941-0cb7d7da92ce",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "0900dda9-4ed5-4547-b708-3ea1f0fbcd67",
          "title": "PUT Usuarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve editar usuario com sucesso",
              "fullTitle": "PUT Usuarios deve editar usuario com sucesso",
              "timedOut": null,
              "duration": 435,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.message).to.contain('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "1499e323-5016-469c-a362-05444fbc5059",
              "parentUUID": "0900dda9-4ed5-4547-b708-3ea1f0fbcd67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve cadastrar quando o id não existir",
              "fullTitle": "PUT Usuarios deve cadastrar quando o id não existir",
              "timedOut": null,
              "duration": 218,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\nconst novoId = _faker.faker.number.int();\ncy.api_putUsuarios(novoId, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body.message).to.contain('Cadastro realizado com sucesso');\n  expect(response.body._id).is.not.null;\n});",
              "err": {},
              "uuid": "86e29f49-8d5f-4ad8-bc1f-34d64a0ce160",
              "parentUUID": "0900dda9-4ed5-4547-b708-3ea1f0fbcd67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1499e323-5016-469c-a362-05444fbc5059",
            "86e29f49-8d5f-4ad8-bc1f-34d64a0ce160"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 653,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e5c06d91-e798-4a9e-a601-3ee49815a3a2",
          "title": "Erros",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "não deve editar com email inválido",
              "fullTitle": "Erros não deve editar com email inválido",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nome = _faker.faker.person.fullName();\nconst email = 'teste@teste';\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\nconst _id = _faker.faker.number.int();\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body).to.have.property('email', 'email deve ser um email válido');\n});",
              "err": {},
              "uuid": "7f28f8be-720f-4392-8626-f387e37907ec",
              "parentUUID": "e5c06d91-e798-4a9e-a601-3ee49815a3a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "não deve editar com email existente",
              "fullTitle": "Erros não deve editar com email existente",
              "timedOut": null,
              "duration": 431,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let _id;\nconst nome = _faker.faker.person.fullName();\nconst email = _faker.faker.internet.email();\nconst password = _faker.faker.internet.password();\nconst administrador = Math.random() < 0.5 ? 'true' : 'false';\ncy.api_postUsuarios(nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(201);\n  _id = response.body._id;\n});\ncy.api_putUsuarios(_id, nome, email, password, administrador).then(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.message).to.contain('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "25f11654-cdcd-414d-ba52-f2c544160418",
              "parentUUID": "e5c06d91-e798-4a9e-a601-3ee49815a3a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f28f8be-720f-4392-8626-f387e37907ec",
            "25f11654-cdcd-414d-ba52-f2c544160418"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 650,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "33903770-ef19-40b0-b8e2-a15c103ebd1a"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 244,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}